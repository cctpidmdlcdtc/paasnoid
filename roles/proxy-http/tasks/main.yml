---
- name: "{{ proxy_service_name }}  |  Create destiny"
  file:
    path: "{{ item }}"
    state: directory
    mode: '0750'
  with_items:
    - "/opt/{{ proxy_service_name }}"
    - "/opt/{{ proxy_service_name }}/conf.d"
    - "/opt/{{ proxy_service_name }}/fragments"
    - "/opt/{{ proxy_service_name }}/ssl"
    - "/opt/{{ proxy_service_name }}/ssl/certs"

- name: "{{ proxy_service_name }}  |  Copy docker-compose main fragments"
  template: 
    src: docker_compose/{{ item }}_block.yml.j2
    dest: /opt/{{ proxy_service_name }}/fragments/{{ item }}_block.yml
    owner: root
    group: root
    mode: 0600 
  with_items:
    - 1_head
    - 3_middle
    - 5_end
  register: newdocker

- name: "{{ proxy_service_name }}  |  Copy docker-compose service fragments 1/2"
  template: 
    src: docker_compose/2_network_block.yml.j2
    dest: /opt/{{ proxy_service_name }}/fragments/2_{{ service_name }}.yml
    owner: root
    group: root
    mode: 0600 
  register: newdocker

- name: "{{ proxy_service_name }}  |  Copy docker-compose service fragments 2/2"
  template: 
    src: docker_compose/4_service_block.yml.j2
    dest: /opt/{{ proxy_service_name }}/fragments/4_{{ service_name }}.yml
    owner: root
    group: root
    mode: 0600 
  register: newdocker

- name: "{{ proxy_service_name }}  |  Assemble docker-compose"
  assemble:
    src: /opt/{{ proxy_service_name }}/fragments
    dest: /opt/{{ proxy_service_name }}/docker-compose.yml
    owner: root
    group: root
    mode: 0600 
  register: newdocker

- name: "{{ proxy_service_name }}  |  Copy default config"
  template: 
    src: 00-default.conf
    dest: /opt/{{ proxy_service_name }}/conf.d/
    owner: root
    group: root
    mode: 0600 
  register: newdocker

- name: "{{ proxy_service_name }}  |  Create virtualhosts"
  template: 
    src: virtualhost.conf.j2
    dest: /opt/{{ proxy_service_name }}/conf.d/{{ service_name }}.conf
    owner: root
    group: root
    mode: 0604
  register: newdocker



- name: "{{ proxy_service_name }}  |  Generate an OpenSSL private key with the default values (4096 bits, RSA) for proxied app"
  openssl_privatekey:
    path: /opt/{{ proxy_service_name }}/ssl/{{ item.name }}.key
  with_items: "{{ virtualhosts }}"

- name: "{{ proxy_service_name }}  |  Generate an OpenSSL Certificate Signing Request with subjectAltName extension for proxied app"
  openssl_csr:
    path: /opt/{{ proxy_service_name }}/ssl/{{ item.name }}.csr
    privatekey_path: /opt/{{ proxy_service_name }}/ssl/{{ item.name }}.key
    country_name: ES
    organization_name: "{{ name_VPN }}"
    organizational_unit_name: Sistemas
    email_address: a@a.com
    common_name: "{{ item.name }}"
    subject_alt_name: 'DNS:{{ item.name }}'
  with_items: "{{ virtualhosts }}"

- name: "{{ proxy_service_name }}  |  Generate a Self Signed OpenSSL certificate for proxied app"
  openssl_certificate:
    path: /opt/{{ proxy_service_name }}/ssl/certs/{{ item.name }}.crt
    privatekey_path: /opt/{{ proxy_service_name }}/ssl/{{ item.name }}.key
    csr_path: /opt/{{ proxy_service_name }}/ssl/{{ item.name }}.csr
    provider: selfsigned
    owner: root
    group: root
    mode: 0604
  register: newdocker
  with_items: "{{ virtualhosts }}"



- name: "{{ proxy_service_name }}  |  Generate an OpenSSL private key with the default values (4096 bits, RSA) for the default https virtualhost"
  openssl_privatekey:
    path: /opt/{{ proxy_service_name }}/ssl/{{ name_VPN|lower }}.vpn.key

- name: "{{ proxy_service_name }}  |  Generate an OpenSSL Certificate Signing Request with subjectAltName extension for the default https virtualhost"
  openssl_csr:
    path: /opt/{{ proxy_service_name }}/ssl/{{ name_VPN|lower }}.vpn.csr
    privatekey_path: /opt/{{ proxy_service_name }}/ssl/{{ name_VPN|lower }}.vpn.key
    country_name: ES
    organization_name: "{{ name_VPN }}"
    organizational_unit_name: Sistemas
    email_address: a@a.com
    common_name: "{{ name_VPN|lower }}.vpn"
    subject_alt_name: 'DNS:{{ name_VPN|lower }}.vpn'

- name: "{{ proxy_service_name }}  |  Generate a Self Signed OpenSSL certificate for the default https virtualhost"
  openssl_certificate:
    path: /opt/{{ proxy_service_name }}/ssl/certs/{{ name_VPN|lower }}.vpn.crt
    privatekey_path: /opt/{{ proxy_service_name }}/ssl/{{ name_VPN|lower }}.vpn.key
    csr_path: /opt/{{ proxy_service_name }}/ssl/{{ name_VPN|lower }}.vpn.csr
    provider: selfsigned
    owner: root
    group: root
    mode: 0604
  register: newdocker



- name: "{{ proxy_service_name }}  |  Create a network with pretty name"
  docker_network:
    name: "{{ proxy_service_name }}"
    driver_options:
      com.docker.network.bridge.name: br-{{ proxy_service_name }}
    ipam_config:
      - subnet: "{{ proxy_service_subnet }}"
        gateway: "{{ proxy_service_gateway }}"

- name: "{{ proxy_service_name }}  |  Get container info"
  docker_container_info:
    name: "{{ proxy_service_name }}_{{ proxy_service_name }}_1"
  register: result
  
- name: "{{ proxy_service_name }}  |  Tear down existing services"
  docker_compose:
    project_src: "/opt/{{ proxy_service_name }}"
    #remove_images: yes
    remove_volumes: yes
    state: absent
  when: not result.exists

- name: "{{ proxy_service_name }}  |  Create and start services"
  docker_compose:
    project_src: "/opt/{{ proxy_service_name }}"
  when: newdocker.changed

#- name: "{{ proxy_service_name }}  |  Apply iptables rules"
#  include_role:
#    name: firewall
#
- name: "{{ proxy_service_name }}  |  Copy iptables service fragments"
  template: 
    src: rules.v4
    dest: /root/iptables-fragments/03_{{ proxy_service_name }}
    owner: root
    group: root
    mode: 0600 
  when: "'router' in group_names"
